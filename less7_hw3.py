# 3. Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе
# должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
# умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять
# увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления
# должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных
# двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному
# аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.


class Cell:
    def __init__(self, num):
        self.num = num

    def __add__(self, other):
        return self.num + int(other)

    def __mul__(self, other):
        return self.num * int(other)

    def __sub__(self, other):
        result = self.num - int(other)
        return result if result > 0 else None

    def __truediv__(self, other):
        return self.num // int(other)

    def __int__(self):
        return self.num

    def make_order(self, num):
        string = ''
        for i in range(int(self) // num):
            string += '*'*num + '\n'
        string += '*' * (int(self) % num)
        print(string)


print(Cell(2) + Cell(3))
print(Cell(2) * Cell(3))
print(Cell(3) - Cell(2))
print(Cell(3) / Cell(2))
Cell.make_order(Cell(15), 3)
